Database interaction is modelled on EOF (Enterprise Object Framework) from
NeXT. Everything is defined via XML which is processed into:

	- C++ code for major entities (Reader, Mediator, Engine, etc..)

	- The console menu

	- Graphs and charts

	- Page forms

The elements in a given database are:

	- Adaptor: access to a database

	- Model: a description of the tables

	- Entity: a table in the model

	- Attribute: a column of an entity, a field

	- Record: a row of an entity

-----------------------------------------------------------------------------
ADAPTOR
-----------------------------------------------------------------------------

We will only be using the MySQL adaptor for now in XCDR:

	<?xml version="1.0" encoding="iso-8559-1"?>
	<adaptor name="default" type="RDBMS:MySQL">
	  <connection name="localhost">
	    <default/>
	    <credentials user="xcdr" password="xcdr"/>
	    <system host="localhost" port="3306"/>
            <tablespace name="xcdr"/>
	  </connection>
	</adaptor>


-----------------------------------------------------------------------------
MODEL
-----------------------------------------------------------------------------

The model is the trickier:

	<?xml version="1.0" encoding="iso-8559-1"?>
	<model  version="0.5"
		adaptor="default"/>

	  <typedef>
	    <profile	name="uint"
			type="unsigned int"
			externalType="INT UNSIGNED"
			null="false"/>
	  </typedef>

	  <entity name="MyTable" type="InnoDB"
		  comment="stores things I like to keep track of">
	    <attrib name="i_entry" profile="uint" primaryKey="true"/>
	    <attrib name="data" profile="uint"/>
	    <populate>
	      <record><a>0</a><a>1</a></record>
	      <record><a>1</a><a>2</a></record>
	      <record><a>2</a><a>1</a></record>
	      <record><a>3</a><a>4</a></record>
	    </poulate>
	  </entity>

	  <entity name="MyOtherTable" type="InnoDB"
		  comment="stores things I like to join with">
	    <attrib name="i_entry" profile="uint" primaryKey="true"/>
	    <attrib name="data" profile="uint"/>
	    <attrib name="i_entry_parent" profile="uint"/>
	    <populate>
	      <record><a>0</a><a>8</a><a>0</a></record>
	      <record><a>1</a><a>7</a><a>0</a></record>
	      <record><a>2</a><a>2</a><a>1</a></record>
	      <record><a>3</a><a>3</a><a>2</a></record>
	    </poulate>
	  </entity>

	  <relation name="myrelation" deleteRule="cascade">
	    <join semantic="inner">
	      <source table="MyOtherTable" attrib="i_entry_parent"/>
	      <destination table="MyTable" attrib="i_entry"/>
	    </join>
	  </relation>

	  <query name="getMyTable">
	    <in entity="MyTable">
	      <attrib name="i_entry"/>
	    </in>
	    <out>
	      <attrib name="data"/>
	    </out>
	    <confine>
	      <relational operator="gt" attrib="data" value="4"/>
	    </confine>
	    <!-- QUERY EQUAL TO:

		SELECT data
		  FROM MyTABLE
		 WHERE (i_entry = <:i_entry>)
		   AND ((data > 4))
	      -->
	  </query>
	</model>

With an adaptor and a model, it is now possible to define the following:

	- Database caches for the mediation and billing entities

	- Web forms backed by the database (add/delete/edit functionality)

-----------------------------------------------------------------------------
CACHE
-----------------------------------------------------------------------------

An example Cache:

  <?xml version="1.0" encoding="iso-8559-1"?>
  <cache name="Reader::ProfileCache"
         table="ReaderProfile"
         max_results="1"
         min_results="1"
         max_age="3600">
    <input>
        <column name="i_reader"/>
    </input>
    <output>
        <column name="i_dir"/>
        <column name="max_lines"/>
        <column name="read_max_time"/>
        <column name="refresh_freq"/>
        <column name="commit_freq"/>
        <column name="poll_freq"/>
        <column name="deposit_freq"/>
    </output>
    <query>
      SELECT <output-column-list/>
        FROM <table-name/>
       WHERE <input-column/> = <input-column-arg/>
    </query>


The C++ code generated by this cache is:

       ==============================================
        Generated C++ File: reader/profilecache.h
        ==============================================

        #include "rdbms.h"

        namespace Reader
        {
                class ProfileCache : public CacheBase
                {
                public:
                        struct Output
                        {
                                unsigned int i_dir;
                                unsigned int max_lines;
                                unsigned int read_max_time;
                                unsigned int refresh_freq;
                                unsigned int commit_freq;
                                unsigned int poll_freq;
                                unsigned int deposit_freq;

                                Output() : i_dir(0), ... {}
                                Output(unsigned int i_dir, unsigned int max_lines, ...);

                                // on Input types will define the following
                                //bool operator < (const Output &lhs);
                        };

                        ProfileCache(RDBMS::Context *c,
                                     max_results=1,
                                     min_results=1,
                                     max_age=3600);

                        Output get(unsigned int i_reader const);

                private:
                        map<unsigned int, Output> cache;
                };
        };


This header can be directly included and can be used like so:

        Reader::ProfileCache *profile_cache =
                new Reader::ProfileCache(context);

        struct Reader::ProfileCache::Data profile;

        profile = profile_cache->get(i_reader);

        cout << profile->i_dir;


-----------------------------------------------------------------------------
MENU SYSTEM (CONTROLLER)
-----------------------------------------------------------------------------

	<?xml version="1.0" encoding="iso-8559-1"?>
	<console>
	  <profile id="host">
	    <menu id="Users" page="User List">
	      <page id="User List"/>
	      <page id="Add New"/>
	    </menu>
	  </profile>
	
	  <menu id="System">
	    <page id="CompanyInfo"/>
	    <menu id="Users" page="User List">
	      <page id="User List"/>
	      <page id="Add New"/>
	    </menu>
	    <menu id="Alerts">
	      <page id="E-mail"/>
	      <page id="SNMP"/>
	    </menu>
	    <menu id="Network"/>
	      <menu id="Hosts">
	        <load-menu query="UI:HostList"
	                   id="hostname"
			   arg="i_host"
	                   profile="host"/>
	      </menu>
	      <menu id="Nodes">
	      </menu>
	    </menu>
	  </menu>
	</console>


-----------------------------------------------------------------------------
PAGE DEFINITIONS (VIEW)
-----------------------------------------------------------------------------

preliminary:

<pagedef>
  <dblink id="Country"
          query="Country">
    <user column="country"/>
    <system column="i_country"/>
  </dbilink>

  <page name=":System:CompanyInfo">
    <form lnk="RDBMS:CompanyInfo">
      <tab id="Contact Info">
        <field id="name"        label="Company Name"/>
        <field id="address"     label="Address/>
        <field id="country"     label="Country"
                                type="select"
                                lnk="RDBMS:Country"/>
        <field id="phone"       label="Phone"/>
        <field id="fax"         label="Fax"/>
        <field id="email"       label="E-mail"/>
        <field id="web"         label="Web"
                                type="url"/>
      </tab>
    </form>
  </page>
</pagedef>

-----------------------------------------------------------------------------
GRAPHS (VIEW)
-----------------------------------------------------------------------------

A preliminary example for graph:

	<?xml version="1.0" encoding="iso-8559-1"?>
	<graph  name="Statistics:RawCDR:PieChart"
		width="500"
		height="300"
		shadow="true"
		antialiasing="true">

	  <title label="Raw CDR's"
		 font="verdana"
		 fontStyle="bold"
		 fontSize="18"
		 color="darkblue"/>

	  <legend xpos="0.025" ypos="0.01"/>

	  <plot type="3dpie"
		theme="sand"
		center="0.4"
		angle="30"
		legends="rdbms://default/query:rawCDRTypeMap">

	    <value font="arial"
		   fontStyle="normal"
		   fontSize="12"/>

	    <data source="rdbms://default/query:rawCDRTypeCount"/>

	  </plot>
	</graph>
