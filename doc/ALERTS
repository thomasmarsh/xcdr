XCDR ALERT SUBSYSTEM
--------------------

XCDR should implement minimally two alert methods for user notification: email,
and SNMP. SNMP is definitely the more complicated of the two and also implies
the ability of remote configuration and management via products like HP
OpenView.

BASE ARCHITECTURE
-----------------

xcdrd is the process responsible for coordinating other elements of the
system (xcdr_reader, xcdr_mediator, etc.), and could be extended to be the
alert daemon. Alternately a separate alert daemon might be implemented called
xcdr_alertd to simplify the individual executables at the cost of an extra
database connection. For the purpose of this document, xcdrd is assumed.

During normal operation the xcdrd program flow looks like this:

	while (!shutdownCalled)
	{
		// make sure all necessary processes are running (this
		// will possible generate alerts!)

		checkProcesses();

		// check alerts

		dispatchAlerts();

		if (snmpConnected())
		{
			processSNMPRequest();
		}

		sleep(idleTime());
	}

Later:

	void XCDRD::dispatchAlerts()
	{
		list<AlertRecipient> recips = getEnabledAlertRecipients();
		list<Alert> alerts = getAllAlerts();

		list<AlertRecipient>::iterator r = recips.begin();
		list<Alert>::iterator a = alerts.begin();

		while (a != alerts.end())
		{
			while (r != recips.end())
			{
				Recipient recip(*r);
				Alert alert(*a);

				if (recip.receives(alert.getType(),
						   alert.getSeverity())
				{
					recip.sendAlert(alert);
				}
				r++;
			}
			a++;
		}
	}


RECIPIENTS
----------

The Recipient class has two basic implementations, the EmailRecipient and
SNMPRecipient. The EmailRecipient will send an email to the recipient address
as expected, full of user friendly messages etc.

The SNMPRecipient will simply append the alert to its private tables, possibly
overwriting any previous entries for depending on the type of alert. As SNMP
is passive (requiring an snmpget to be called before data is sent), the data
will remain queued here. If an SNMP connection is made to xcdrd (it listens
on a specified port with a default port 161/SNMP) then it will respond within
the processSNMPRequest method. The basic logic here is imlemented in a separate
code library (NET-SNMP syntax). The following example shows the implementation
for the count of raw records and mediated records:

#include "xsnmp.h"
#include "mib/nsXcdrStatistics.h"

const oid xcdrOID[] = { 1, 3, 6, 1, 4, 1, 8072, 2, 1, 2, 0 };

SNMP::Handler<xcdrOID,
              "xcdr_instance",
              SNMP::Access::READWRITE> xcdrRegistration;

class XCDRStatistics : public SNMP::Base<xcdrRegistration>
{
protected:
	// accessors for variables
	unsigned int getRawCount();
	unsigned int getMedCount();

	// variables which we will store
	SNMP::ASNInteger<XCDRRAWCOUNT, RONLY, getRawCount> raw_count;
	SNMP::ASNInteger<XCDRMEDIATEDCOUNT, RONLY, getMedCount> med_count;

	// collected variables into a list
	typedef SNMP::Variables<raw_count, med_count> VariableList;

public:
	void XCDRStatistics()
		: SNMP::Base<xcdrRegistration>()
	{
		// inherited method
		registerVariable(raw_count);
		registerVariable(med_count);
		finalize();
	}


protected:
	unsigned int getRawCount()
	{
		RDBMS::Query query = ...
		query << "SELECT COUNT(*) FROM CDR_Raw";
		...
		return results[0][0];
	}
	...
};


SQL SCHEMA
----------

A sample alert schema in the database might look like (including a sample alert from the mediator):

=============================== BEGIN SQL ================================

-- -----------------------------------------------------------------------
--
-- ALERT RECIPIENTS (just temporary until ACL system is in place)
--
-- -----------------------------------------------------------------------

CREATE TABLE AlertRecipient
(
	i_recip		INT UNSIGNED,
	i_type		INT UNSIGNED,
	description	VARCHAR(32),
	enabled		TINYINT(1),
);
INSERT INTO AlertRecipient VALUES
	(0,	0,	'UNUSED',	0),
	(1,	1,	'SNMP',		1),
	(2,	2,	'John',		1),
	(3,	2,	'Mike',		1);

CREATE TABLE AlertRecipientType
(
	i_type		INT UNSIGNED NOT NULL,
	description	VARCHAR(32)
);
INSERT INTO AlertRecipientType VALUES
	(0,	'UNUSED'),
	(1,	'SNMP'),
	(2,	'Email');

CREATE TABLE AlertRecipient_Email
(
	i_recip		INT UNSIGNED,
	email		VARCHAR(255)
);
INSERT INTO AlertRecipient_Email VALUES
	(2,	"john@bigtelco.com"),
	(3,	"mike@bigtelco.com");

CREATE TABLE AlertRecipient_SNMP
(
	i_recip		INT UNSIGNED,
	i_severity	INT UNSIGNED
);
INSERT INTO AlertRecipient_SNMP VALUES
	(1, 1),
	(1, 2),
	(1, 3),
	(1, 4),
	(1, 5);

-- -----------------------------------------------------------------------
--
-- ALERTS
--
-- -----------------------------------------------------------------------

CREATE TABLE Alerts
(
	i_entity	INT UNSIGNED,
	i_entity_id	INT UNSIGNED,
	i_serverity	INT UNSIGNED,
	i_type		INT UNSIGNED,
	i_detail	INT UNSIGNED
);
INSERT INTO Alerts VALUES
	(2, 0, 7, 1, 1);


-- -----------------------------------------------------------------------
--
-- ENTITIES
--
-- -----------------------------------------------------------------------

CREATE TABLE Entities
(
	i_entity	INT UNSIGNED,
	name		VARCHAR(32)
);
INSERT INTO Entities VALUES
	(0,	'UNUSED'),
	(1,	'xcdrd'),
	(2,	'xcdr_reader'),
	(3,	'xcdr_mediator');


-- -----------------------------------------------------------------------
--
-- SEVERITIES
--
-- -----------------------------------------------------------------------

CREATE TABLE AlertSeverity
(
	i_severity	INT UNSIGNED,
	name		VARCHAR(16)
);
INSERT INTO AlertSeverity VALUES
	(0,	'UNUSED'),
	(1,	'EMERG'),
	(2,	'ALERT'),
	(3,	'CRIT'),
	(4,	'ERROR'),
	(5,	'WARN'),
	(6,	'NOTICE'),
	(7,	'INFO'),
	(8,	'DEBUG'),
	(9,	'TRACE');


-- -----------------------------------------------------------------------
--
-- ALERT TYPES
--
-- -----------------------------------------------------------------------

CREATE TABLE AlertType
(
	i_type		INT UNSIGNED,
	name		VARCHAR(32)
);
INSERT INTO AlertType VALUES
	(0,	'UNUSED'),
	(1,	'Idle'),
	(2,	'RateNotFound');


-- -----------------------------------------------------------------------
--
-- ALERT DETAIL
--
-- -----------------------------------------------------------------------

CREATE TABLE AlertDetail_Idle
(
	i_detail	INT UNSIGNED,
	a_timestamp	TIMESTAMP
);
INSERT INTO AlertDetail_Idle VALUES
	(0,	NULL),
	(1,	now());


CREATE TABLE AlertDetail_RateNotFound
(
	i_detail	INT UNSIGNED,
	i_call		CHAR(64)
);
INSERT INTO AlertDetail_RateNotFound
	(0,	'0x000000000000');
				
	

================================= END SQL ================================

USAGE BY CLIENTS
----------------

Clients of the alert system are any entities that will generate alerts. The
process of defining an alert type consists of:

	- add an entry to the AlertType table
	- create an AlertDetail_<type> table
	- subclass AlertBase and add implementation:
		- write constructor
		- write insert() method

For the example of the RateNotFound alert:

namespace Alert
{
	// The following creates RateAlertReg with the following detail
	//
	//	id = 2
	//	alert_name = "RateNotFound"
	//	alert_detail_table = "AlertDetail_RateNotFound"
	//

	typedef AlertID<2, "RateNotFound"> RateAlertReg;

	//
	// RateAlertBase: this is a convenience typedef
	//

	typedef AlertBase<RateAlertReg> RateAlertBase;

	//
	// Concrete implementation of the Rate alert
	//

	class Rate : public RateAlertBase
	{
	public:
		Rate(const string &_i_call) : RateAlertBase()
		{
			i_call = _i_call;
		}	

		void insert(RDBMS::Statement &sql) const
		{
			sql << "("
			    << getDetailID() << ", "
			    << "\"" << i_call << "\")";
		}
	private:
		string i_call;
	};
}

The usage of the Alert example Rate alert in client code would be:

	...

	Rater::rateCall()
	{
		...

		if (rate_map.count(rateDetail(call)) == 0)
		{
			Alert::generate(Alert::Rate(call.i_call));
		}
		else
		{
			Rate r = rate_map.get(rateDetail(call));
			applyRate(r, call);
		}
		...
	}

	...
